// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Auditlog Auditlog
//
// swagger:model Auditlog
type Auditlog struct {

	// action
	// Required: true
	Action *string `json:"action"`

	// data
	Data string `json:"data,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// time
	// Required: true
	// Format: date-time
	Time *strfmt.DateTime `json:"time"`

	// urn
	// Required: true
	Urn *string `json:"urn"`
}

// Validate validates this auditlog
func (m *Auditlog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Auditlog) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *Auditlog) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Auditlog) validateUrn(formats strfmt.Registry) error {

	if err := validate.Required("urn", "body", m.Urn); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Auditlog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Auditlog) UnmarshalBinary(b []byte) error {
	var res Auditlog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
