// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Access Access Model
//
// Access Model is used to represent the relationship between the API user and the service. Access objects are attached to the resources that are sensitive in nature and need some sort of access-control.
//
// swagger:model Access
type Access struct {

	// description
	Description ResourceDescription `json:"description,omitempty"`

	// Unix time stating when this access expires.
	ExpiresAt int64 `json:"expiresAt,omitempty"`

	// key
	// Required: true
	Key ResourceKey `json:"key"`

	// Long secret key (usually shown once during the access generation process).
	// Required: true
	Secret *string `json:"secret"`

	// tags
	Tags ResourceTags `json:"tags,omitempty"`

	// Access key type describes the level of permissions you get for a particular resource (root > user > service).
	// Required: true
	// Enum: [root user service]
	Type *string `json:"type"`
}

// Validate validates this access
func (m *Access) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Access) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := m.Description.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("description")
		}
		return err
	}

	return nil
}

func (m *Access) validateKey(formats strfmt.Registry) error {

	if err := m.Key.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("key")
		}
		return err
	}

	return nil
}

func (m *Access) validateSecret(formats strfmt.Registry) error {

	if err := validate.Required("secret", "body", m.Secret); err != nil {
		return err
	}

	return nil
}

func (m *Access) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := m.Tags.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tags")
		}
		return err
	}

	return nil
}

var accessTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["root","user","service"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessTypeTypePropEnum = append(accessTypeTypePropEnum, v)
	}
}

const (

	// AccessTypeRoot captures enum value "root"
	AccessTypeRoot string = "root"

	// AccessTypeUser captures enum value "user"
	AccessTypeUser string = "user"

	// AccessTypeService captures enum value "service"
	AccessTypeService string = "service"
)

// prop value enum
func (m *Access) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accessTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Access) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Access) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Access) UnmarshalBinary(b []byte) error {
	var res Access
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
