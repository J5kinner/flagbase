// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Access Access
//
// Access is used to represent the relationship between the API user and the service. Access objects are attached to the resources, which are used to authorise users.
//
// swagger:model Access
type Access struct {

	// description
	Description ResourceDescription `json:"description,omitempty"`

	// Unix time stating when this access expires.
	ExpiresAt int64 `json:"expiresAt,omitempty"`

	// Arbitrary access identifier
	ID string `json:"id,omitempty"`

	// Generated access key (make sure you save this key)
	Key string `json:"key,omitempty"`

	// name
	Name ResouceName `json:"name,omitempty"`

	// Generated secret (make sure you save this secert).
	Secret string `json:"secret,omitempty"`

	// tags
	Tags ResourceTags `json:"tags,omitempty"`

	// Access key type describes the level of permissions you get for a particular resource (root > user > service).
	// Enum: [root admin user service]
	Type string `json:"type,omitempty"`
}

// Validate validates this access
func (m *Access) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Access) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := m.Description.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("description")
		}
		return err
	}

	return nil
}

func (m *Access) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *Access) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := m.Tags.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tags")
		}
		return err
	}

	return nil
}

var accessTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["root","admin","user","service"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessTypeTypePropEnum = append(accessTypeTypePropEnum, v)
	}
}

const (

	// AccessTypeRoot captures enum value "root"
	AccessTypeRoot string = "root"

	// AccessTypeAdmin captures enum value "admin"
	AccessTypeAdmin string = "admin"

	// AccessTypeUser captures enum value "user"
	AccessTypeUser string = "user"

	// AccessTypeService captures enum value "service"
	AccessTypeService string = "service"
)

// prop value enum
func (m *Access) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accessTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Access) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Access) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Access) UnmarshalBinary(b []byte) error {
	var res Access
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
