// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SegmentRule SegmentRule
//
// Rule consists of a trait a condition and a value.
//
// swagger:model SegmentRule
type SegmentRule struct {

	// condition
	// Enum: [equal not_equal greater_than greater_than_or_equal less_than less_than_or_equal contains regex]
	Condition string `json:"condition,omitempty"`

	// key
	Key ResourceKey `json:"key,omitempty"`

	// trait key
	TraitKey string `json:"traitKey,omitempty"`

	// trait value
	TraitValue string `json:"traitValue,omitempty"`
}

// Validate validates this segment rule
func (m *SegmentRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var segmentRuleTypeConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["equal","not_equal","greater_than","greater_than_or_equal","less_than","less_than_or_equal","contains","regex"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		segmentRuleTypeConditionPropEnum = append(segmentRuleTypeConditionPropEnum, v)
	}
}

const (

	// SegmentRuleConditionEqual captures enum value "equal"
	SegmentRuleConditionEqual string = "equal"

	// SegmentRuleConditionNotEqual captures enum value "not_equal"
	SegmentRuleConditionNotEqual string = "not_equal"

	// SegmentRuleConditionGreaterThan captures enum value "greater_than"
	SegmentRuleConditionGreaterThan string = "greater_than"

	// SegmentRuleConditionGreaterThanOrEqual captures enum value "greater_than_or_equal"
	SegmentRuleConditionGreaterThanOrEqual string = "greater_than_or_equal"

	// SegmentRuleConditionLessThan captures enum value "less_than"
	SegmentRuleConditionLessThan string = "less_than"

	// SegmentRuleConditionLessThanOrEqual captures enum value "less_than_or_equal"
	SegmentRuleConditionLessThanOrEqual string = "less_than_or_equal"

	// SegmentRuleConditionContains captures enum value "contains"
	SegmentRuleConditionContains string = "contains"

	// SegmentRuleConditionRegex captures enum value "regex"
	SegmentRuleConditionRegex string = "regex"
)

// prop value enum
func (m *SegmentRule) validateConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, segmentRuleTypeConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SegmentRule) validateCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	// value enum
	if err := m.validateConditionEnum("condition", "body", m.Condition); err != nil {
		return err
	}

	return nil
}

func (m *SegmentRule) validateKey(formats strfmt.Registry) error {

	if swag.IsZero(m.Key) { // not required
		return nil
	}

	if err := m.Key.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("key")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SegmentRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SegmentRule) UnmarshalBinary(b []byte) error {
	var res SegmentRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
