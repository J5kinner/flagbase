// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessInput AccessInput
//
// swagger:model AccessInput
type AccessInput struct {

	// description
	Description ResourceDescription `json:"description,omitempty"`

	// Unix time stating when this access expires.
	ExpiresAt int64 `json:"expiresAt,omitempty"`

	// name
	Name ResouceName `json:"name,omitempty"`

	// tags
	Tags ResourceTags `json:"tags,omitempty"`

	// Access key type describes the level of permissions you get for a particular resource (root > user > service).
	// Required: true
	// Enum: [root user service]
	Type *string `json:"type"`
}

// Validate validates this access input
func (m *AccessInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessInput) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := m.Description.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("description")
		}
		return err
	}

	return nil
}

func (m *AccessInput) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *AccessInput) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := m.Tags.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tags")
		}
		return err
	}

	return nil
}

var accessInputTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["root","user","service"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessInputTypeTypePropEnum = append(accessInputTypeTypePropEnum, v)
	}
}

const (

	// AccessInputTypeRoot captures enum value "root"
	AccessInputTypeRoot string = "root"

	// AccessInputTypeUser captures enum value "user"
	AccessInputTypeUser string = "user"

	// AccessInputTypeService captures enum value "service"
	AccessInputTypeService string = "service"
)

// prop value enum
func (m *AccessInput) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accessInputTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccessInput) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessInput) UnmarshalBinary(b []byte) error {
	var res AccessInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
