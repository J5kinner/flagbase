swagger: '2.0'
info:
  description: |
    # Overview
    ## Key Concepts
    TODO

    ## Authentication
    TODO

    ## Representations
    TODO

    ## CORS
    TODO

    ## Versioning
    TODO
  title: Flagbase
  version: 1.0.0
  contact:
    name: Flagbase Team
    url: 'https://flagbase.com/community'
    email: team@flagbase.com
  license:
    name: MPL 2.0
    url: 'https://www.mozilla.org/en-US/MPL/2.0/'
  x-logo:
    altText: Flagbase Core API
  termsOfService: 'https://flagbase.com/legal/terms'
tags:
  - name: access
    x-displayName: Access
    description: Access is a representation of the relationship between the service user and its resources. Access is usually required by resources that are sensitive in nature and need some sort of protection. Users with root or admin privelleges have full control over resources and can also create and update resource access. Service users only have read access and used by SDKs and other read-only clients.
  - name: workspaces
    x-displayName: Workspaces
    description: "Workspaces represent a collection of projects. It can be used to group an individual or organisation's projects."
  - name: workspace-access
    x-displayName: Workspace Access
    description: A new workspace-access link should be created in order to enable the appropriate acess permissions to this resource and its children.
  - name: projects
    x-displayName: Projects
    description: Projects represent a collection of feature flags and their respective rollout rules etc. Projects also have different contexts which are applied (i.e. environments).
  - name: project-access
    x-displayName: Project Access
    description: A new project-access link should be created in order to enable the appropriate acess permissions to this resource and its children.
  - name: environments
    x-displayName: Environments
    description: 'Environments are used to maintain isolated contexts for project resources (such as feature flags, rollout rules etc). For example, you can have Test and Production environments, which contain completely separate rollout rules etc.'
  - name: environment-access
    x-displayName: Environment Access
    description: A new environment-access link should be created in order to enable the appropriate acess permissions to this resource and its children.
  - name: flags
    x-displayName: Feature Flags
    description: 'A feature flag (aka feature switch) represent the current state of a feature. Feature flags consists of variations (ie. boolean (true, false) or multi-variant (A, B, C)), where each variation represents a unique state of a particular feature.'
  - name: variations
    x-displayName: Variations
    description: A variation represents a particular feature flag state. Feature flags usually consist of multiple variations (e.g. True and False). We can rollout different feature variations to particular users or user segments.
  - name: targeting
    x-displayName: Targeting
    description: 'Targeting is essentially a rollout configuration which defines how feature flag variations are rolled out to specific users. Rollout rules can target specific user or segments. After users "evaluate" a specific rollout rule and obtain a flag variation.'
  - name: targeting-rules
    x-displayName: Targeting Rules
    description: Targeting rules allow you to explicity define how you want to target feature flags to users. You are required to specify logical statements which are evaluated when serving flags to users.
  - name: targeting-percentages
    x-displayName: Targeting Percentages
    description: Targeting percentages are used when you want to conduct a incremental rollouts on a certain percentage of users. It allows you to rollout variations to explicit percentages of your whole cohort base.
  - name: segments
    x-displayName: Segments
    description: Segments represent a specific group of users based on their attributes. You can define a specific user segments using a set rules. Rules contain conditions that are applied to attributes.
  - name: segment-rules
    x-displayName: Segment Rules
    description: "Segment rules consists of conditions that need to match a specific user's attributes (i.e. identity traits) ."
  - name: identities
    x-displayName: Identities
    description: An identity is an instance of a user. Identities are initially created when the first evaluate a feature flag (i.e. by using the SDK).
  - name: auditlog
    x-displayName: Auditlog
    description: 'Auditlog is a log of all mutations on the workspace and its children resources (i.e. projects, environments and feature flags).'
x-tagGroups:
  - name: Authentication
    tags:
      - access
  - name: Project Management
    tags:
      - workspaces
      - projects
      - environments
  - name: Flag Management
    tags:
      - flags
      - variations
  - name: Targeting Management
    tags:
      - targeting
      - targeting-rules
      - targeting-percentages
  - name: User Management
    tags:
      - identities
      - segments
      - segment-rules
  - name: Access Management
    tags:
      - workspace-access
      - project-access
      - environment-access
      - auditlog
paths:
  '/workspaces/{workspaceKey}':
    get:
      operationId: get-workspace
      summary: Get workspace
      produces:
        - application/json
      description: 'Retreive a workspace, given the workspace key.'
      tags:
        - workspaces
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Workspace'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
    parameters:
      - type: string
        name: workspaceKey
        in: path
        required: true
        description: The workspace key
    patch:
      summary: Update workspace
      operationId: update-workspace
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Workspace'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
          headers: {}
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - workspaces
      description: Update an existing workspace.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Workspace'
          description: Workspace Object
    delete:
      summary: Delete workspace
      operationId: delete-workspace
      responses:
        '204':
          description: No Content
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Delete an existing workspace. This operation can not be undone. Please proceed with caution.
      tags:
        - workspaces
  '/projects/{projectKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
    get:
      summary: Get project
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Project'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: get-project
      tags:
        - projects
      description: Get an existing project.
      parameters: []
    patch:
      summary: Update project
      operationId: update-project
      responses:
        '200':
          description: OK
      tags:
        - projects
      description: Update an existing project.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Project'
          description: Project Object
    delete:
      summary: Delete project
      operationId: delete-project
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - projects
      description: Delete an existing project.
  '/environments/{projectKey}/{envKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
      - type: string
        name: envKey
        in: path
        required: true
        description: The environment key
    get:
      summary: Get environment
      tags:
        - environments
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Environment'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: get-environment
      description: Get a project environment.
      parameters:
        - type: string
          in: query
          name: workspaceKey
          description: The workspace key
        - type: string
          in: query
          name: projectKey
          description: The project key
    patch:
      summary: Update environment
      operationId: update-environment
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Environment'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Environment'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - environments
      description: Update an existing environment.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/EnvironmentInput'
          description: Environment Object
    delete:
      summary: Delete environment
      operationId: delete-environment
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - environments
      description: Delete an existing environment.
  '/flags/{projectKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
    get:
      summary: List feature flags
      tags:
        - flags
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Flag'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-flags
      parameters:
        - type: string
          in: query
          name: env
          description: The environment key
          required: true
      description: List feature flags in the project.
    post:
      summary: Create feature flag
      operationId: create-flag
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Flag'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - flags
      description: Create a new feature flag in the specified project
      parameters:
        - type: string
          in: query
          name: env
          description: The environment key
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Flag'
          description: Flag Object
  /workspaces:
    get:
      summary: List workspaces
      tags:
        - workspaces
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Workspace'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-workspaces
      description: |-
        List all workspaces.

        Note: you need root access to perform this operation.
      parameters: []
    post:
      summary: Create workspace
      operationId: create-workspace
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - workspaces
      description: Create a new workspace. Workspace keys must be unique.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Workspace'
          description: Workspace Object
    parameters: []
  /access:
    post:
      summary: Create access
      operationId: create-access
      responses:
        '201':
          description: Created
          schema:
            allOf:
              - type: object
                properties:
                  data:
                    $ref: '#/definitions/Access'
              - $ref: '#/definitions/SuccessResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - access
      description: Create a new access key-secret pair.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/AccessInput'
          description: Access model
    parameters: []
  /projects:
    post:
      summary: Create project
      operationId: create-project
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Project'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Project'
          description: 'Project Object '
      tags:
        - projects
      description: Create a new project. The project will be created in the workspace accociated with the access key-secret pair being used.
    parameters: []
    get:
      summary: List projects
      operationId: get-projects
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Project'
      description: List all projects in the workspace associated with this access key-secret pair.
      tags:
        - projects
  /access/sign:
    post:
      summary: Sign access
      operationId: sign-access
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - access
      description: Obtain a signed access token using an access key-secret pair.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              key:
                type: string
                description: Unique access key
              secret:
                type: string
                description: Access secret
            required:
              - key
              - secret
          description: Access key-secret pair.
  /auditlog:
    get:
      summary: List audit logs
      tags:
        - auditlog
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Auditlog'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-auditlog
      description: Retrieve a segment of audit logs within a particular time-peroid.
      parameters:
        - type: string
          in: query
          name: after
          description: Unix timestamp denoting the start time to filter logs.
        - type: string
          in: query
          name: before
          description: Unix timestamp denoting the end time to filter logs.
        - type: string
          in: query
          name: q
          description: Search query param
        - type: number
          in: query
          name: limit
          description: Number of log items to fetch. Useful for pagination.
        - type: string
          in: query
          name: skip
          description: Number of log items to skip. Useful for pagination.
  '/workspaces/{workspaceKey}/access':
    parameters:
      - type: string
        name: workspaceKey
        in: path
        required: true
        description: The workspace key
    get:
      summary: List workspace access
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Access'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-workspace-access
      description: List access keys that are currently in use for a particular workspace.
      tags:
        - workspace-access
    post:
      summary: Create workspace access
      operationId: create-workspace-access
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Access'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Create a new workspace access link. Make sure you generate the access key-secret pair with the appropriate permissions type before using this operation.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/AccessPairInput'
          description: Access Key-Secret Pair
      tags:
        - workspace-access
    delete:
      summary: Delete workspace access
      operationId: delete-workspaces-access
      responses:
        '204':
          description: No Content
      description: Delete an existing workspace access link.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/AccessPairInput'
          description: Access Key-Secret Pair
      tags:
        - workspace-access
  '/projects/{projectKey}/access':
    get:
      summary: List project access
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/AccessPairInput'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-project-access
      description: List access keys that are currently in use for a particular project.
      tags:
        - project-access
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
    post:
      summary: Create project access
      operationId: create-project-access
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Access'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Create a new project access link. Make sure you generate the access key-secret pair with the appropriate permissions type before using this operation.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/AccessPairInput'
          description: Access Key-Secret Pair
      tags:
        - project-access
    delete:
      summary: Delete project access
      operationId: delete-project-access
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Delete an existing project access link.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/AccessPairInput'
          description: Access Key-Secret Pair
      tags:
        - project-access
  '/environments/{projectKey}/{envKey}/access':
    parameters:
      - type: string
        name: envKey
        in: path
        required: true
        description: The environment key
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
    get:
      summary: List environment access
      tags:
        - environment-access
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Access'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-environment-access
      description: List access keys that are currently in use for a particular environment.
    post:
      summary: Create environment access
      operationId: create-environment-access
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Access'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - environment-access
      description: Create a new environment access link. Make sure you generate the access key-secret pair with the appropriate permissions type before using this operation.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/AccessPairInput'
          description: Access Key-Secret Pair
    delete:
      summary: Delete environment access
      operationId: delete-environment-access
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - environment-access
      description: Delete an existing environment access link.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/AccessPairInput'
          description: Access Key-Secret Pair
  '/environments/{projectKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
    get:
      summary: List project environments
      tags:
        - environments
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Environment'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-environments
      description: "Retreive a list of a project's environments."
    post:
      summary: Create environment
      operationId: create-environment
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Environment'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - environments
      description: Create a new project environment
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Environment'
          description: Environmnet Object
  '/flag/{projectKey}/{flagKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
      - type: string
        name: flagKey
        in: path
        required: true
        description: The flag key
    get:
      summary: Get feature flag
      tags:
        - flags
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Flag'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: get-flag
      parameters:
        - type: string
          in: query
          name: env
          required: true
      description: Get a single feature flag using its key.
    patch:
      summary: Update feature flag
      operationId: update-flag
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Flag'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - flags
      description: Update an existing flag.
      parameters:
        - type: string
          in: query
          name: env
          description: The environment key
    delete:
      summary: Delete feature flag
      operationId: delete-flag
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - flags
      description: Delete an existing flag.
  '/variations/{projectKey}/{flagKey}':
    parameters:
      - type: string
        name: flagKey
        in: path
        required: true
        description: The flag key
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
    get:
      summary: List variations
      tags:
        - variations
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Variation'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-variations
      description: List all variations of a specific flag.
      parameters: []
    post:
      summary: Create variation
      operationId: create-variation
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Variation'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - variations
      description: Create a flag variation.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Variation'
          description: Variation Object
  '/variations/{projectKey}/{flagKey}/{variationKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
      - type: string
        name: flagKey
        in: path
        required: true
        description: The flag key
      - type: string
        name: variationKey
        in: path
        required: true
        description: The variation key
    get:
      summary: Get variation
      tags:
        - variations
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Variation'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: get-variation
      description: Get a single variation of a specific flag.
    patch:
      summary: Update variation
      operationId: update-variation
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Variation'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - variations
      description: Update a specific variation.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Variation'
          description: Variation Object
    delete:
      summary: Delete variation
      operationId: delete-variation
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - variations
      description: Delete a single flag variation
  '/identities/{projectKey}/{envKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
      - type: string
        name: envKey
        in: path
        required: true
        description: The environment key
    get:
      summary: List identities
      tags:
        - identities
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Identity'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-identities
      description: List project identities in a specific environment.
      parameters:
        - type: string
          in: query
          name: q
          description: Search query
        - type: number
          in: query
          name: limit
          description: Number of identities items to fetch. Useful for pagination.
        - type: number
          in: query
          name: offset
          description: Number of identities to skip. Useful for pagination.
  '/identities/{projectKey}/{envKey}/{identityKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
      - type: string
        name: envKey
        in: path
        required: true
        description: The environment key
      - type: string
        name: identityKey
        in: path
        required: true
        description: The identity key
    get:
      summary: Get identity
      tags:
        - identities
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Identity'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: get-identity
      description: Get a single identity from a project.
    delete:
      summary: Delete identity
      operationId: delete-identity
      responses:
        '204':
          description: No Content
          schema: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - identities
      description: Delete an environment specific identity.
  '/targeting/{projectKey}/{flagKey}':
    parameters:
      - type: string
        name: flagKey
        in: path
        required: true
        description: The flag key
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
    get:
      summary: Get targeting
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: get-targeting
      description: "Get a specific flag's targeting configuration. "
      tags:
        - targeting
      parameters:
        - type: string
          in: query
          name: env
          description: The environment key
          required: true
    patch:
      summary: Update targeting
      operationId: update-tageting
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Update a targeting configuration of a existing feature flag.
      parameters:
        - type: string
          in: query
          name: env
          description: The environment key
          required: true
      tags:
        - targeting
  '/targeting/{projectKey}/{flagKey}/rules':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
      - type: string
        name: flagKey
        in: path
        required: true
        description: The flag key
    get:
      summary: List targeting rules
      tags:
        - targeting-rules
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-target-rules
      description: List the targeting rules of an existing flag in a specific environment.
      parameters:
        - type: string
          in: query
          name: env
          description: The environment key
          required: true
    post:
      summary: Create targeting rule
      operationId: create-targeting-rule
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - targeting-rules
      description: Create a new targeting rule for a feature flag in a specific environment.
      parameters:
        - type: string
          in: query
          name: env
          description: The environment key
          required: true
  '/targeting/{projectKey}/{flagKey}/rules/{ruleKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
      - type: string
        name: flagKey
        in: path
        required: true
        description: The flag key
      - type: string
        name: ruleKey
        in: path
        required: true
        description: The rule key
    get:
      summary: Get targeting rule
      tags:
        - targeting-rules
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: get-targeting-rule
      parameters:
        - type: string
          in: query
          name: env
          required: true
          description: The environment key
      description: Get a targeting rule for a specfic flag and its environment.
    patch:
      summary: Update targeting rule
      operationId: update-targeting-rule
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Update an existing target rule.
      parameters:
        - type: string
          in: query
          name: env
          description: The environment key
          required: true
      tags:
        - targeting-rules
    delete:
      summary: Delete targeting rule
      operationId: delete-targeting-rule
      responses:
        '204':
          description: No Content
          schema: {}
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Delete an existing targeting rule.
      parameters:
        - type: string
          in: query
          name: env
          required: true
          description: The environment key
      tags:
        - targeting-rules
  '/targeting/{projectKey}/{flagKey}/percentages':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
      - type: string
        name: flagKey
        in: path
        required: true
        description: The flag key
    get:
      summary: List targeting percentages
      tags:
        - targeting-percentages
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-targeting-percentages
      description: Provide new targeting percentages for each variations.
    patch:
      summary: Update targeting percentages
      operationId: update-targeting-percentages
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Update targeting percentages.
      parameters:
        - type: string
          in: query
          name: env
          description: The environment key
      tags:
        - targeting-percentages
  '/segments/{projectKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
    get:
      summary: List segments
      tags:
        - segments
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-segments
      description: "List a project's user segments."
    post:
      summary: Create segment
      operationId: create-segment
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - segments
      description: Create a user segment in a specific project.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Segment'
          description: Segment Object
  '/segments/{projectKey}/{segmentKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
      - type: string
        name: segmentKey
        in: path
        required: true
        description: The segment key
    get:
      summary: Get segment
      tags:
        - segments
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: get-segment
      description: Get a user segment from a project.
      parameters: []
    patch:
      summary: Update segment
      operationId: update-segment
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Update an existing user segment in a specific project.
      tags:
        - segments
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Segment'
          description: Segment Object
    delete:
      summary: Delete segment
      operationId: delete-segment
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - segments
      description: Delete an existing user segment.
      parameters: []
  '/segments/{projectKey}/{segmentKey}/rules':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
      - type: string
        name: segmentKey
        in: path
        required: true
        description: The segment key
    get:
      summary: List segment rules
      tags:
        - segment-rules
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: list-segment-rules
      description: List segment rules for a particular segment.
      parameters: []
    post:
      summary: Create segment rule
      operationId: create-segment-rule
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties: {}
      tags:
        - segment-rules
      description: Create a new segment rule for a particular segment.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/SegmentRule'
          description: Segment Rules
  '/segments/{projectKey}/{segmentKey}/rules/{ruleKey}':
    parameters:
      - type: string
        name: projectKey
        in: path
        required: true
        description: The project key
      - type: string
        name: segmentKey
        in: path
        required: true
        description: The segment key
      - type: string
        name: ruleKey
        in: path
        required: true
        description: The segment rule key
    get:
      summary: Get segment rule
      tags:
        - segment-rules
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/SegmentRule'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      operationId: get-segment-rule
      description: Get a specific segment rule
    patch:
      summary: Update segment rule
      operationId: update-segment-rule
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/SegmentRule'
      description: Update an existing segment rule.
      tags:
        - segment-rules
    delete:
      summary: Delete segment rule
      operationId: delete-segment-rule
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Delete an existing segment rule
      tags:
        - segment-rules
definitions:
  Workspace:
    description: A representation of a workspace
    type: object
    title: Workspace
    x-examples: {}
    properties:
      key:
        $ref: '#/definitions/ResourceKey'
      name:
        $ref: '#/definitions/ResouceName'
      description:
        $ref: '#/definitions/ResourceDescription'
      tags:
        $ref: '#/definitions/ResourceTags'
    required:
      - key
  Identity:
    title: Identity
    type: object
    description: A identity refers to a user who has evaluated a flag.
    properties:
      key:
        type: string
        description: Unique key representing an identity
      traits:
        type: object
        description: Custom user attributes
    required:
      - key
  Access:
    title: Access
    type: object
    description: 'Access is used to represent the relationship between the API user and the service. Access objects are attached to the resources, which are used to authorise users.'
    properties:
      key:
        type: string
        description: Generated access key (make sure you save this key)
      secret:
        type: string
        description: Generated secret (make sure you save this secert).
      type:
        type: string
        enum:
          - root
          - user
          - service
        description: 'Access key type describes the level of permissions you get for a particular resource (root > user > service).'
      description:
        $ref: '#/definitions/ResourceDescription'
      tags:
        $ref: '#/definitions/ResourceTags'
      expiresAt:
        type: integer
        description: Unix time stating when this access expires.
        format: int64
    required:
      - key
      - type
  AccessInput:
    title: AccessInput
    type: object
    description: ''
    properties:
      type:
        type: string
        enum:
          - root
          - user
          - service
        description: 'Access key type describes the level of permissions you get for a particular resource (root > user > service).'
      description:
        $ref: '#/definitions/ResourceDescription'
      tags:
        $ref: '#/definitions/ResourceTags'
      expiresAt:
        type: integer
        description: Unix time stating when this access expires.
        format: int64
    required:
      - type
  Auditlog:
    title: Auditlog
    type: object
    properties:
      time:
        type: string
        format: date-time
      description:
        type: string
      urn:
        type: string
      action:
        type: string
      data:
        type:
          - string
          - object
    required:
      - time
      - urn
      - action
  ResourceKey:
    type: string
    title: Resource Key
    pattern: '^[a-z0-9]+([_ -]?[a-z0-9])*$'
    maxLength: 30
    example: example-key
    description: A unique key used to identify this resource.
    minLength: 4
  ResouceName:
    type: string
    title: Resouce Name
    description: A name used to label resources. Ideally a human-readable version of the resource key.
    maxLength: 30
    example: Example Name
  ResourceDescription:
    type: string
    title: Resource Description
    description: Optional resource description.
    example: This should be a description.
  ResourceTags:
    title: Resource Tags
    description: 'Optional tags used to identify this resource. '
    type: array
    x-examples: {}
    items:
      type: string
      example: example-tag
  Environment:
    title: Environment
    type: object
    properties:
      key:
        $ref: '#/definitions/ResourceKey'
      name:
        $ref: '#/definitions/ResouceName'
      description:
        $ref: '#/definitions/ResourceDescription'
      tags:
        $ref: '#/definitions/ResourceTags'
    required:
      - key
  EnvironmentInput:
    title: EnvironmentInput
    type: object
    properties:
      key:
        $ref: '#/definitions/ResourceKey'
      name:
        $ref: '#/definitions/ResouceName'
      description:
        $ref: '#/definitions/ResourceDescription'
      tags:
        $ref: '#/definitions/ResourceTags'
    required:
      - key
  Project:
    title: Project
    type: object
    description: A project is a collection of environments and their respective flags.
    properties:
      key:
        $ref: '#/definitions/ResourceKey'
      name:
        $ref: '#/definitions/ResouceName'
      description:
        $ref: '#/definitions/ResourceDescription'
      tags:
        $ref: '#/definitions/ResouceName'
    required:
      - key
  Flag:
    title: Flag
    type: object
    description: "A flag (aka feature flag) refers to a software toggle used to define a particular module's state. Flags can belong to multiple environments."
    properties:
      key:
        $ref: '#/definitions/ResourceKey'
      name:
        $ref: '#/definitions/ResouceName'
      description:
        $ref: '#/definitions/ResourceDescription'
      tags:
        $ref: '#/definitions/ResourceTags'
    required:
      - key
  Variation:
    title: Variation
    type: object
    description: 'A variation refers to a feature flag value. Eg. (Bool: True, False), (Multi-variant: A, B, C)'
    properties:
      key:
        $ref: '#/definitions/ResourceKey'
      name:
        $ref: '#/definitions/ResouceName'
      description:
        $ref: '#/definitions/ResourceDescription'
      tags:
        $ref: '#/definitions/ResourceTags'
    required:
      - key
  SuccessResponse:
    title: SuccessResponse
    type: object
    properties:
      data:
        type: object
    description: Standard success response object
  ErrorResponse:
    title: ErrorResponse
    type: object
    description: Standard error response object
    x-examples: {}
    properties:
      errors:
        type: array
        items:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
              description: Reason for error.
          required:
            - code
            - message
    required:
      - errors
  AccessPairInput:
    title: AccessPairInput
    type: object
    description: An access secret-key pair.
    properties:
      key:
        type: string
        description: The access key.
      secret:
        type: string
        description: The access secret.
  Segment:
    title: Segment
    type: object
    description: A segment is a collection of identities with similar traits.
    properties:
      key:
        $ref: '#/definitions/ResourceKey'
      name:
        $ref: '#/definitions/ResouceName'
      description:
        $ref: '#/definitions/ResourceDescription'
      tags:
        $ref: '#/definitions/ResourceTags'
    required:
      - key
  SegmentRule:
    title: SegmentRule
    type: object
    description: Rule consists of a trait a condition and a value.
    properties:
      key:
        $ref: '#/definitions/ResourceKey'
      traitKey:
        type: string
      condition:
        type: string
        enum:
          - equal
          - not_equal
          - greater_than
          - greater_than_or_equal
          - less_than
          - less_than_or_equal
          - contains
          - regex
        example: equal
      traitValue:
        type: string
produces:
  - application/json
schemes:
  - https
host: api.flagbase.io
consumes:
  - application/json
securityDefinitions: {}
